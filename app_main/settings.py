"""
Django settings for app_main project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ
import sentry_sdk
from celery.schedules import crontab
from django.utils.translation import gettext_lazy as _
from sentry_sdk.integrations.django import DjangoIntegration
from stellar_sdk import Asset, Network

env = environ.Env(DEBUG=(bool, False))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(env_file=str(BASE_DIR / ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")
TESTING = False

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    # 3rd party packages
    "django_extensions",
    "django_hosts",
    "rest_framework",
    "corsheaders",
    "phone_verify",
    "djmoney",
    "djmoney.contrib.exchange",
    "storages",
    "kash",
    "kash.abstract",
    "kash.auth",
    "kash.card",
    "kash.earning",
    "kash.invite",
    "kash.kyc",
    "kash.notification",
    "kash.payout",
    "kash.promo",
    "kash.transaction",
    "kash.user",
]

MIDDLEWARE = [
    "django_hosts.middleware.HostsRequestMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # 'request_logging.middleware.LoggingMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_hosts.middleware.HostsResponseMiddleware",
]

ROOT_URLCONF = "app_main.urls"
ROOT_HOSTCONF = "app_main.hosts"
DEFAULT_HOST = "api"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app_main.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

AUTH_USER_MODEL = "kash_user.User"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    # "core.backends.auth.SMSAuthBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "200/day", "deposit": "1/minute"},
    "DEFAULT_FILTER_BACKENDS": [
        "rest_framework.filters.OrderingFilter",
    ],
    "PAGE_SIZE": 30,
}

SMS_BACKEND = (
    "kash.auth.backends.sms.ConsoleSMSBackend"
    if DEBUG
    else "kash.auth.backends.sms.MessageBirdSMSBackend"
)

PHONE_VERIFICATION = {
    "BACKEND": SMS_BACKEND,
    "OPTIONS": {},
    "TOKEN_LENGTH": 6,
    "MESSAGE": _("Your verification code for {app} is: {security_code}"),
    "APP_NAME": "Kash",
    "SECURITY_CODE_EXPIRATION_TIME": 3600 * 0.5,
    "VERIFY_SECURITY_CODE_ONLY_ONCE": False,
    "TEST_PHONE_NUMBERS": ["+22921000000", "+22921000001"],
}

SIMPLE_JWT = {
    "ROTATE_REFRESH_TOKENS": True,
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
}

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-shop-id",
]

APP_NAME = env("APP_NAME")
APP_ENV = env("APP_ENV")
IS_BETA = APP_ENV == 'beta'

DO_SPACES_KEY = env("DO_SPACES_KEY")
DO_SPACES_SECRET = env("DO_SPACES_SECRET")
DO_SPACES_BUCKET = env("DO_SPACES_BUCKET")
DO_SPACES_REGION = env("DO_SPACES_REGION")
DO_SPACES_ENDPOINT_URL = env("DO_SPACES_ENDPOINT_URL")

SLACK_TOKEN = env("SLACK_TOKEN")
TG_CHAT_ID = env("TG_CHAT_ID")
TG_BOT_TOKEN = env("TG_BOT_TOKEN")

MESSAGEBIRD_ACCESS_KEY = env("MESSAGEBIRD_ACCESS_KEY")

RAVE_SECRET_KEY = env("RAVE_SECRET_KEY")
RAVE_PUBLIC_KEY = env("RAVE_PUBLIC_KEY")

CLIENT_VERSION = "1.0.0"

KWEEK_COMMISSION_RATIO = 0.05

OPEN_EXCHANGE_RATES_APP_ID = env("OPEN_EXCHANGE_RATES_APP_ID")

INTERNAL_IPS = "127.0.0.1"

if not DEBUG:
    sentry_sdk.init(
        dsn=env("SENTRY_KEY"),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

QOSIC_USERNAME = env("QOSIC_USERNAME")
QOSIC_PASSWORD = env("QOSIC_PASSWORD")
QOSIC_MOOV_MONEY_CLIENT_ID = env("QOSIC_MOOV_MONEY_CLIENT_ID")
QOSIC_MTN_MOBILE_MONEY_CLIENT_ID = env("QOSIC_MTN_MOBILE_MONEY_CLIENT_ID")
QOSIC_URL = env("QOSIC_URL")

EXCHANGE_BACKEND = "djmoney.contrib.exchange.backends.OpenExchangeRatesBackend"

ONESIGNAL_APP_ID = env("ONESIGNAL_APP_ID")
ONESIGNAL_REST_API_KEY = env("ONESIGNAL_REST_API_KEY")


CELERY_BROKER_URL = env("REDIS_URL")
CELERY_RESULT_BACKEND = env("REDIS_URL")

CELERY_BEAT_SCHEDULE = (
    {
        "check_txn_status": {
            "task": "kash.tasks.check_txn_status",
            "schedule": crontab(minute="*"),
        },
        # "send_pending_notifications": {
        #     "task": "kash.tasks.send_pending_notifications",
        #     "schedule": crontab(minute="*/3"),
        # },
        "retry_failed_funding": {
            "task": "kash.tasks.retry_failed_funding",
            "schedule": crontab(minute="*/5"),
        },
        "monitor_flw_balance": {
            "task": "kash.tasks.monitor_flw_balance",
            "schedule": crontab(hour="*", minute="00"),
        },
        "reward_referrer": {
            "task": "kash.tasks.reward_referrer",
            "schedule": crontab(hour="*/3", minute="30"),
        },
        "fetch_rave_rate": {
            "task": "kash.tasks.fetch_rave_rate",
            "schedule": crontab(hour="*", minute="15"),
        },
    }
    if APP_NAME == "api-server"
    else {}
)

CONVERSION_RATES = {"NGN_XOF": 620 / 575, "MARGIN": 0.08}

QOSIC_RATE = 0.017
WITHDRAWAL_RATE = 0.04

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["console"],
            "level": "DEBUG",  # change debug level as appropiate
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}
LOGIN_URL = "/admin/"

SILKY_PYTHON_PROFILER = True
SILKY_AUTHENTICATION = True
SILKY_AUTHORISATION = True

PAYOUT_RECIPIENTS = {
    "me-moov": {"phone": "98801811", "gateway": "moov-bj"},
    "me-mtn": {"phone": "90137010", "gateway": "mtn-bj"},
    "tino": {"phone": "69739797", "gateway": "mtn-bj"},
    "camille-mtn": {"phone": "67607629", "gateway": "mtn-bj"},
    "camille-moov": {"phone": "64978775", "gateway": "moov-bj"},
    "harold": {"phone": "62606333", "gateway": "mtn-bj"},
    "tino2": {"phone": "62814106", "gateway": "mtn-bj"},
}
